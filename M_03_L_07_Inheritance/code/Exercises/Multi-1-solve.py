# Описание задачи:
#
# Создайте четыре класса: X, Y, Z и W. Класс W должен наследовать от классов X, Y и Z.
# Каждый класс должен выводить сообщение при вызове его конструктора.
# Используйте множественное наследование и вызовы super() в конструкторах классов X, Y и Z.
#
# Определите порядок вызова конструкторов при создании экземпляра класса W и объясните результат.
#
# Требования:
# Классы должны выводить сообщения при вызове их конструкторов.
# Класс W должен корректно наследовать от классов X, Y и Z.
# Используйте метод разрешения порядка (MRO) для объяснения порядка вызова конструкторов.

class X:
    def __init__(self):
        print("Constructor of X")
        super().__init__()


class Y:
    def __init__(self):
        print("Constructor of Y")
        super().__init__()


class Z:
    def __init__(self):
        print("Constructor of Z")
        super().__init__()


class W(X, Y, Z):
    def __init__(self):
        print("Constructor of W")
        super().__init__()


def main():
    # Тестирование
    w = W()

    # Проверка MRO
    print(W.__mro__)


if __name__ == "__main__":
    main()
